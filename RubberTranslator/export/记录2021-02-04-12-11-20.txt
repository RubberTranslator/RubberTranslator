ze the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent 

 Makalu, the state-of-the-art lock-based persistent allocator, and such transient allocators as LRMalloc and JEMalloc. In particu 

e persist just enough information during normal operation to permit a garbage collection (GC) pass to correctly reconstruct the 

liferation of fast, dense, byte-addressable nonvolatile memory suggests that dat 

Toward this end, we introduce recoverability, a correctness criterion for persistent allocators, together with a nonblocking allocator, Ralloc, that satisfi es this criterion. Ralloc is based on the LRMalloc of Leite and Rocha, with four key innovations: First, we persist just enough information during normal operation to permit a garbage collection (GC) pass to correctly reconstruct the heap in the wake of a full-system crash. Second, we introduce the notion of fi lter functions, which identify the locations of pointers within persistent blocks to mitigate the limitations of conservative GC. Third, we reorganize the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent (off set-based) pointers to allow persistent regions to be mapped at an arbitrary address.


y the locations of pointers within persistent blocks to mitigate the limitations of conservative GC. Third, we reorganize the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent (off set-based) pointers to allow persistent regions to be mapped a 

Toward this end, we introduce recoverability, a correctness criterion for persistent allocators, together with a nonblocking allocator, Ralloc, that satisfi es this criterion. Ralloc is based on the LRMalloc of Leite and Rocha, with four key innovations: First, we persist just enough information during normal operation to permit a garbage collection (GC) pass to correctly reconstruct the heap in the wake of a full-system crash. Second, we introduce the notion of fi lter functions, which identify the locations of pointers within persistent blocks to mitigate the limitations of conservative GC. Third, we reorganize the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent (off set-based) pointers to allow persistent regions to  

gate the limitations of conservative GC. Third, we reorganize the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent (off set-based) pointers to allow persistent regions to be mapped at an arbitrary address.
Experiments show R 

ents show Ralloc to be performance-competitive with both Makalu, the state-of-the-art lock-based persistent allocator, and such transient allocators as LRMalloc and JEMalloc. In particular, reliance on GC and offl ine metadata reconstruction allows R 

