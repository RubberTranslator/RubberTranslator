ze the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent 
ze堆的布局有助于物理空间的增量分配。第四，我们采用与位置无关的

 Makalu, the state-of-the-art lock-based persistent allocator, and such transient allocators as LRMalloc and JEMalloc. In particu 
Makalu是基于锁的最先进的持久性分配器，以及LRMalloc和JEMalloc等瞬时分配器。特别是

e persist just enough information during normal operation to permit a garbage collection (GC) pass to correctly reconstruct the 
e在正常操作期间仅保留足够的信息，以允许通过垃圾回收（GC）来正确地重建垃圾回收站。

liferation of fast, dense, byte-addressable nonvolatile memory suggests that dat 
快速，密集，可字节寻址的非易失性存储器的寿命表明

Toward this end, we introduce recoverability, a correctness criterion for persistent allocators, together with a nonblocking allocator, Ralloc, that satisfi es this criterion. Ralloc is based on the LRMalloc of Leite and Rocha, with four key innovations: First, we persist just enough information during normal operation to permit a garbage collection (GC) pass to correctly reconstruct the heap in the wake of a full-system crash. Second, we introduce the notion of fi lter functions, which identify the locations of pointers within persistent blocks to mitigate the limitations of conservative GC. Third, we reorganize the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent (off set-based) pointers to allow persistent regions to be mapped at an arbitrary address.

	为此，我们介绍了可恢复性，持久性分配器的正确性标准以及满足该条件的无阻塞分配器Ralloc。 Ralloc基于Leite和Rocha的LRMalloc，具有四个关键的创新：首先，我们在正常操作期间仅保留足够的信息，以允许垃圾回收（GC）通过以在整个系统崩溃后正确地重建堆。其次，我们引入过滤器功能的概念，该功能可以确定持久性块中指针的位置，以减轻保守GC的局限性。第三，我们重新组织堆的布局，以促进物理空间的增量分配。第四，我们采用与位置无关（基于偏移）的指针，以允许将持久区域映射到任意地址。

y the locations of pointers within persistent blocks to mitigate the limitations of conservative GC. Third, we reorganize the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent (off set-based) pointers to allow persistent regions to be mapped a 
y指针在持久块内的位置，以减轻保守GC的局限性。第三，我们重新组织堆的布局，以促进物理空间的增量分配。第四，我们采用与位置无关（基于偏移）的指针，以允许将持久区域映射为

Toward this end, we introduce recoverability, a correctness criterion for persistent allocators, together with a nonblocking allocator, Ralloc, that satisfi es this criterion. Ralloc is based on the LRMalloc of Leite and Rocha, with four key innovations: First, we persist just enough information during normal operation to permit a garbage collection (GC) pass to correctly reconstruct the heap in the wake of a full-system crash. Second, we introduce the notion of fi lter functions, which identify the locations of pointers within persistent blocks to mitigate the limitations of conservative GC. Third, we reorganize the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent (off set-based) pointers to allow persistent regions to  
为此，我们介绍了可恢复性，持久性分配器的正确性标准以及满足该条件的无阻塞分配器Ralloc。 Ralloc基于Leite和Rocha的LRMalloc，具有四个关键的创新：首先，我们在正常操作期间仅保留足够的信息，以允许垃圾回收（GC）通过以在整个系统崩溃后正确地重建堆。其次，我们引入过滤器功能的概念，该功能可以确定持久性块中指针的位置，以减轻保守GC的局限性。第三，我们重新组织堆的布局，以促进物理空间的增量分配。第四，我们采用与位置无关（基于偏移）的指针来允许持久区域

gate the limitations of conservative GC. Third, we reorganize the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent (off set-based) pointers to allow persistent regions to be mapped at an arbitrary address.
Experiments show R 
	限制保守GC的局限性。第三，我们重新组织堆的布局，以促进物理空间的增量分配。第四，我们采用与位置无关（基于偏移）的指针，以允许将持久区域映射到任意地址。
	实验表明R

ents show Ralloc to be performance-competitive with both Makalu, the state-of-the-art lock-based persistent allocator, and such transient allocators as LRMalloc and JEMalloc. In particular, reliance on GC and offl ine metadata reconstruction allows R 
ents显示Ralloc与Makalu（基于锁的最新持久性分配器）以及LRMalloc和JEMalloc等瞬时分配器在性能上具有竞争力。尤其是，依靠GC和最终元数据重构可以使R

 le system. Taking advantage of persistence, however, is not a trivial exercise. If data is to be recovered after a full-system c 
乐系统。但是，利用持久性并不是一件容易的事。如果要在整个系统c之后恢复数据

 (off set-based) pointers to allow persistent regions to be mapped at an arbitrary address.
Experiments show Ralloc to be performance-competitive with both Makalu, the state-of 
	（基于偏移量的）指针，以允许将持久性区域映射到任意地址。
	实验表明，Ralloc与Makalu都具有性能竞争力。

permit a garbage collection (GC) pass to correctly reconstruct the heap in the wake of a full-system crash. Second, we introduce the notion of fi lter functions, which identify the locations 
允许垃圾回收（GC）通过以在整个系统崩溃后正确地重建堆。其次，我们介绍过滤功能的概念，该功能可以确定位置

Toward this end, we introduce recoverability, a correctness criterion for persistent allocators, together with a nonblocking allocator, Ralloc, that satisfi es this criterion. Ralloc is based on the LRMalloc of Leite and Rocha, with four key innovations: First, we persist just enough information during normal operation to permit a garbage collection (GC) pass to correctly reconstruct the heap in the wake of a full-system crash. Second, we introduce the notion of fi lter functions, which identify the locations of pointers within persistent blocks to mitigate the limitations of conservative GC. Third, we reorganize the layout of the heap to facilitate the incremental allocation of physical space. Fourth, we employ position-independent (off set-based) pointers to allow persistent regions to be mapped at an arbitrary address.

	为此，我们介绍了可恢复性，持久性分配器的正确性标准以及满足该条件的无阻塞分配器Ralloc。 Ralloc基于Leite和Rocha的LRMalloc，具有四个关键的创新：首先，我们在正常操作期间仅保留足够的信息，以允许垃圾回收（GC）通过以在整个系统崩溃后正确地重建堆。其次，我们引入过滤器功能的概念，该功能可以确定持久性块中指针的位置，以减轻保守GC的局限性。第三，我们重新组织堆的布局，以促进物理空间的增量分配。第四，我们采用与位置无关（基于偏移）的指针，以允许将持久区域映射到任意地址。

